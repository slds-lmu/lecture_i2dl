<<setup-child, include = FALSE>>=
library(knitr)
source('./code/text_encoding.R')
# amsmath in preamble, whut?
set_parent("../style/preamble.Rnw")
knitr::opts_chunk$set(cache=FALSE)
@

\input{../../latex-math/basic-math}


\lecturechapter{6}{Convolutional neural networks II}
\lecture{Deeplearning}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%\begin{vbframe}{Important Types of Convolutions}

% As CNNs are one of the workhorses of deep learning, lots of research focuses on this model class. 

%\vspace*{0.2cm}
%
%In this chapter, we will introduce important types of convolutions: 
%
%    \begin{enumerate}
%    \item 1D convolutions
%    \item 2D convolutions
%    \item 3D convolutions
%    % \item Locally connected convolutions
%    \item Dilated convolutions
%    \item Transposed convolutions
%    % \item Inception modules
%    % \item Separable convolutions
%    %\item Skip connections
%    %\item Global average pooling
%    %\item Squeeze-and-Excite layers
%    \end{enumerate}
%\end{vbframe}


%\section{1D Convolutions}
\section{Important types of convolutions}

\begin{vbframe}{1D Convolutions}

\textbf{Data situation}: Sequential, 1-dimensional tensor data. 

\begin{itemize}
% \item Data is convolved with a 1D-kernel.
\item Data consists of tensors with shape [channels, xdim]
\item Single channel:
    \begin{itemize}
        \item Univariate time series, e.g. development of a single stock price over time
        \item Functional / curve data
    \end{itemize}
\item Multi-channel:
    \begin{itemize}
        \item Multivariate time series, e.g.
        \begin{itemize}
            \item Movement data measured with multiple sensors for human activity recognition \cite{21}
            \item Temperature and humidity in weather forecasting
        \end{itemize}
        \item Text encoded as character-level one-hot-vectors \cite{20}
    \end{itemize}
\end{itemize}

$\to$ Convolve the data with a 1D-kernel

\end{vbframe}


\begin{vbframe}{1D Convolutions -- Sensor data}
    \begin{figure}
        \centering
        \includegraphics[width=9cm]{plots/05_conv_variations/1d/HAR.png}
        \caption{Illustration of 1D movement data with three channels measured with an accelerometer sensor belonging to a human activity recognition task. }
    \end{figure}
\framebreak
    \begin{figure}
        \centering
        \includegraphics[width=10cm]{plots/05_conv_variations/1d/deep_tsc.png}
        \caption{Time series classification with 1D CNNs and global average pooling (explained later). An input time series is convolved with 3 CNN layers, pooled and fed into a fully connected layer before the final softmax layer. This is one of the classic time series classification architectures \cite{31}.}
    \end{figure}
\end{vbframe}


\begin{vbframe}{1D Convolutions -- Text mining}
    \begin{itemize}
        \item 1D convolutions also have an interesting application in text mining \cite{20}.
        \item For example, they can be used to classify the sentiment of text snippets such as yelp reviews.
    \end{itemize}
    \begin{figure}
        \centering
        \includegraphics[width=12cm]{plots/05_conv_variations/1d/yelp_lmu.png}
        \caption{Sentiment classification: can we teach the net that this a positive review?}
    \end{figure}
\end{vbframe}

\frame{
\frametitle{1D Convolutions -- Text mining}    
    \center
    \only<1>{\includegraphics[width=5cm]{plots/text_encoding/1_encoded_text.png}}%
    \only<2>{\includegraphics[width=9cm]{plots/text_encoding/4_encoded_text.png}}%
    \only<3>{\includegraphics[width=9cm]{plots/text_encoding/8_encoded_text.png}}%
    \only<4>{\includegraphics[width=9cm]{plots/text_encoding/11_encoded_text.png}}%
    \\
    % \only<1>{1D convolution of text that was encoded on a character-level. The data is represented as 1D signal with channel size = size of the alphabet as shown in \cite{20}. The temporal dimension is shown as the y dimension for illustrative purposes. The 1D-kernel (blue) convolves the input in the temporal y-dimension yielding a 1D feature vector}  
    \begin{itemize}
        \only<1>{\item We use a given alphabet to encode the text reviews (here: \textit{\enquote{dummy review}}).}
        \only<1>{\item Each character is transformed into a one-hot vector. The vector for character \textit{d} contains only 0's at all positions except for the 4th position.}
        \only<1>{\item The maximum length of each review is set to 1014: shorter texts are padded with spaces (zero-vectors), longer texts are simply cut.}
        \only<2>{\item The data is represented as 1D signal with channel size = size of the alphabet.}
        \only<3>{\item The temporal dimension is shown as the y dimension for illustrative purposes. }
        \only<4>{\item The 1D-kernel (blue) convolves the input in the temporal y-dimension yielding a 1D feature vector. }
    \end{itemize}
}

\begin{vbframe}{1D Convolutions -- Text mining}
    \begin{figure}
        \centering
        \includegraphics[width=11cm]{plots/05_conv_variations/1d/ccnnArch.png}
        \caption{An alphabet containing 72 (special-) characters is used for encoding and the text length is fixed to 1014. This yields an accuracy of 96\% with a net trained on 500K reviews \cite{20}. }
    \end{figure}
\end{vbframe}


%\section{2D Convolutions}

\begin{vbframe}{2D Convolutions}

\textbf{Data situation}: 2-dimensional tensor data such as image data.
    \begin{itemize}
        \item[$\to$] Refer to the previous lecture for a comprehensive introduction to 2-dimensional convolutions.
    \end{itemize}
    \begin{figure}
        \centering
        \includegraphics[width=8cm]{plots/05_conv_variations/2d/2d_catdog.png}
        \caption{Simple binary classification problem on 2D image data: cat vs. dog detection as illustrated \href{https://becominghuman.ai/building-an-image-classifier-using-deep-learning-in-python-totally-from-a-beginners-perspective-be8dbaf22dd8}{here}.}
    \end{figure}
\end{vbframe}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%\section{3D Convolutions}

\begin{vbframe}{3D Convolutions}

\textbf{Data situation}: 3-dimensional tensor data.

    \begin{itemize}
        \item Data consists of tensors with shape [channels, xdim, ydim, zdim].
        \item Dimensions can be both temporal (e.g. video frames) or spatial (e.g. MRI)
        \item Examples:
        \begin{itemize}
            \item Human activity recognition in video data \cite{18}
            \item Disease classification or tumor segmentation on MRI scans \cite{19}
        \end{itemize}
    \end{itemize}

\textbf{Solution}: Move a 3D-kernel in $x$, $y$ and $z$ direction to capture all important information.

\end{vbframe}

\begin{vbframe}{3D Convolutions -- Data}
    \begin{figure}
        \centering
        \includegraphics[width=5cm]{plots/05_conv_variations/3d/MRI.png}
        \caption{Illustration of single-channel volumetric data: MRI scan \cite{17}. Each slice of the stack has one channel, as the frames are black-white.}
    \end{figure}
\end{vbframe}

\begin{vbframe}{3D Convolutions -- Data}
    \begin{figure}
        \centering
        \includegraphics[width=5cm]{plots/05_conv_variations/3d/swim.png}
        \caption{Illustration of multi-channel volumetric data: video snippet of an action detection task. The video consists of several slices, stacked in temporal order. Frames have three channels, as they are RGB.}
    \end{figure}
\end{vbframe}

\begin{vbframe}{3D Convolutions}
    \begin{figure}
        \centering
        \includegraphics[width=8cm]{plots/05_conv_variations/3d/3dconv.png}
    \end{figure}
    \begin{itemize}
        \item Note: 3D convolutions yield a 3D output.
        % \item 3D convolution can be expressed as: 
        % $$ H(i, j, k) = (\mathcal{I}\star\mathcal{G})(i, j, k)=\sum_{x}\sum_{y}\sum_{z}\mathcal{I}(x, y, z)\mathcal{G}(i-x, j-y, k-z) $$
    \end{itemize}
\end{vbframe}

\begin{vbframe}{3D Convolutions}
    % https://dspace.cc.tut.fi/dpub/bitstream/handle/123456789/24703/teivas.pdf?sequence=1&isAllowed=y
    \begin{figure}
        \centering
        \includegraphics[width=11cm]{plots/05_conv_variations/3d/3dconv_arch.png}
        \caption{Basic 3D-CNN architecture.}
    \end{figure}
    \begin{itemize}
        \item Basic architecture of the CNN stays the same.
        \item 3D convolutions output 3D feature maps which are element-wise activated and then (eventually) pooled in 3 dimensions.
    \end{itemize}
\end{vbframe}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%\section{Dilated Convolutions}

\begin{vbframe}{Dilated convolutions}

    \vspace*{-0.3cm}

    \begin{itemize}
        \item The \textbf{receptive field} of a single neuron comprises all inputs that have an impact on this neuron. 
        \item Neurons in the first layers capture less information of the input, while neurons in the last layers have huge receptive fields and can capture a lot more global information from the input. 
        \item The size of the receptive fields depends on the filter size. 
    \end{itemize}

    \vspace*{-0.5cm}

    \begin{figure}
        \centering
        \includegraphics[width=4cm]{plots/05_conv_variations/dilated/receptive_field2.png}
        \caption{Receptive field of each convolution layer with a $3 \times 3$ kernel. The green area marks the receptive field of one pixel in Layer 2, the yellow area marks the receptive field of one pixel in layer 3 \cite{38}. } 
    \end{figure}

    \framebreak 

    \begin{itemize}
        \item By increasing the filter size, the receptive fields of the neurons increase as well and more contextual information can be captured.
        \item However, increasing the filter size increases the number of parameters, which leads to increased runtime. 
        \item Idea: artificially increase the receptive field of the net without using more filter weights by adding a new dilation parameter to the kernel $\mathcal{K}$ that skips pixels during convolution.
        % \item Benefits:
        % \begin{itemize}
        %     \item Capture more contextual information. 
        %     \item Enable the processing of inputs in higher dimensions to detect fine details. 
        %     \item Improved run-time-performance due to less parameters.
        % \end{itemize}
    \end{itemize}

    \vspace*{-0.6cm}
 
    \begin{figure}
        \centering
        \includegraphics[width=10cm]{plots/05_conv_variations/dilated/dilation_nice.png}
        \caption{Dilated convolution on 2D data \cite{14}. A dilated kernel is a regular convolutional kernel interleaved with zeros. } 
    \end{figure}

\framebreak

    \begin{itemize}
        \item Useful in applications where the global context is of great importance for the model decision.
        \item This component finds application in:
        \begin{itemize}
            \item Generation of audio-signals and songs within the famous Wavenet developed by DeepMind \cite{15}.
            \item Time series classification and forecasting \cite{23}.
            \item Image segmentation \cite{22}.
        \end{itemize}
    \end{itemize}


% \framebreak

%     \begin{itemize}
%         \item Dilation increases the receptive field of the model - what is a receptive field?
%         \item Receptive field: the visual field of a single neuron in a specific layer.
%         \item Huge receptive field of neurons in the last hidden layer: they can capture a lot more global information from the input.
%         % \item Formula for neuron in layer $l$ with kernel size $k$, dilation factor $d$ and stride $s$:
%         % $$
%         %     RF_l = RF_{l-1} + (k-1) \cdot d \cdot \prod_{i = 1}^{k-1}s_i
%         % $$
%         % \item See \href{https://www.uio.no/studier/emner/matnat/ifi/INF5860/v18/undervisningsmateriale/lectures/inf5860_lecture6_convolutional_nerual_networks.pdf}{Oslo slides for original formula}, adapted to dilation by Jann, to be xchecked
%     \end{itemize}
\framebreak 
    \vspace*{0.5cm}
    \begin{figure}
        \centering
        \includegraphics[width=11cm]{plots/05_conv_variations/dilated/classic_conv.png}
        \caption{Regular convolution: we use a convolutional kernel of size 2 with the fixed weights $\{0.5, 1.0\}$ and convolve the input vector with a stride of 2. We do not dilate the kernel in this example (the dilation factor is one) and one neuron in layer 2 has a receptive field of size 4 after two stacked layers. }
    \end{figure}
\framebreak 
    \vspace*{0.5cm}
    \begin{figure}
        \centering
        \includegraphics[width=11cm]{plots/05_conv_variations/dilated/dilated.png}
        \caption{Dilated convolution: we use a convolutional kernel of size 2 with the fixed weights $\{0.5, 1.0\}$ and convolve the input vector with a stride of 2. We dilate the kernel with a factor of 2 in this example and one neuron in layer 2 has a receptive field of size 8 after two stacked layers.}
    \end{figure}
% \framebreak
%     \begin{itemize}
%         % http://ttic.uchicago.edu/~shubhendu/Pages/Files/Lecture8_flat.pdf
%         \item Remember the formulation of a regular convolution from the previous lecture:
%             \begin{equation*}
%                  H(i, j) = (\mathcal{I} \ast \mathcal{G})(i, j) = \sum_{x} \sum_{y} \mathcal{I}(x, y) \mathcal{G}(i-x, j-y)
%             \end{equation*}
%         \item Using the dilation factor $d$ leads to this formulation of a dilated convolution:
%             \begin{equation*}
%                  H(i, j) = (\mathcal{I} \ast \mathcal{G})(i, j) = \sum_{x} \sum_{y} \mathcal{I}(x, y) \mathcal{G}(i-(d \cdot x), j-(d \cdot y))
%             \end{equation*}
%     \end{itemize}
\framebreak 
    \begin{figure}
        \centering
        \includegraphics[width=8cm]{plots/05_conv_variations/dilated/tcn.png}
        \caption{Application of dilated convolutions on time series for classification or seq2seq prediction \cite{23}. The dilations are used to drastically increase the context information for each output neuron $y_i$ with relatively few layers.}
    \end{figure}


\end{vbframe}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%\section{Transposed Convolutions}


\begin{vbframe}{Transposed convolutions}
    \begin{itemize}
        \item Problem setting: 
        \begin{itemize}
            \item In some encoder-decoder architectures such as (variational) Autoencoders, Segmentation Nets, GANs, dimensions of the feature maps are getting reduced in a first step, 
            \item before being re-increased to the original dimensionality in a second step.
        \end{itemize}
        \item Instead of decreasing dimensionality as with regular convolutions, \textbf{transposed convolutions} are used to re-increase dimensionality back to the initial dimensionality.
        % \item Idea: use transposed convolutions to re-increase dimensionality instead of decreasing it as with regular convolutions.
        \item Note: Do not confuse this with deconvolutions (which are mathematically defined as the inverse of a convolution).
    \end{itemize}
\framebreak
    \begin{itemize}
        \item Example 1:
        \begin{itemize}
            \item Input: blue feature map with dim $4\times 4$.
            \item Output: turquoise feature map with dim $2\times 2$.
        \end{itemize}
    \end{itemize}
    \begin{figure}
      \centering
      \includegraphics[width=10cm]{plots/05_conv_variations/transpose/transpose_conv_0.png}
      \caption{ A \textbf{regular} convolution with kernel-size $k$ = 3, padding $p$ = 0 and stride $s$ = 1.}
    \end{figure}
    Here, the feature map shrinks from $4\times 4$ to $2\times 2$.
\framebreak
    \begin{itemize}
      \item Example 1:
        \small{
        \begin{itemize}
            \item Now, let us upsample the $2\times 2$ feature map back to a $4\times 4$ feature map.
            \item Input: $2\times 2$ (blue). Output: $4\times 4$ (turquoise).
            % \item Output: turquoise feature map with dim $4\times 4$
        \end{itemize}
      \item One way to upsample is to use a regular convolution with various padding strategies.}
    \end{itemize}
    \begin{figure}
      \centering
      \includegraphics[width=10cm]{plots/05_conv_variations/transpose/transpose_conv.png}
      \caption{\textbf{Transposed} convolution can be a seen as a regular convolution. Convolution (above) with $k' = 3, s' = 1, p' = 2$ re-increases dimensionality from $2\times 2$ to $4\times 4$ as shown in \cite{14}}
    \end{figure}
% \framebreak
%     \begin{itemize}
%         \item Convolution with parameters kernel size $k$, stride $s$ and padding factor $p$
%         \item Associated transposed convolution has parameters $k' = k$, $s' = s$ and $p' = k-1$
%     \end{itemize}
% \framebreak
%   Example 2 : (Transposed) Convolution as a matrix multiplication : 
% % \framebreak
% %   Example 2 : Let's now view transposed convolutions from a different perspective.
%    \begin{figure}
%       \centering
%       \scalebox{0.75}{\includegraphics{plots/05_conv_variations/transpose/transpose_mat_1.png}}
%       \tiny{\\credit:Stanford University}
%       \caption{A "regular" 1D convolution. kernel size = 3, stride = 1 , padding = 1. The vector $a$ is the 1D input feature map. }
%   \end{figure}
%   
%   
% \framebreak
%   Example 2 : (Transposed) Convolution as a matrix multiplication :
% \begin{figure}
%       \centering
%       \scalebox{0.6}{\includegraphics{plots/05_conv_variations/transpose/transpose_mat_2.png}}
%       \tiny{\\credit:Stanford University}
%       \caption{"Transposed" convolution upsamples a vector of length 4 to a vector of length 6. Stride is 1. Note the change in padding.}
%   \end{figure}
  % \small{Important : Even though the "structure" of the matrix here is the transpose of the original matrix, the non-zero elements are, in general, different from the correponding elements in the original matrix. These (non-zero) elements/weights are tuned by backpropagation.} 

\framebreak 

  Example 2: Transposed Convolution as matrix multiplication:
  \begin{figure}
      \centering
      \scalebox{1}{\includegraphics{plots/05_conv_variations/transpose/tr_ex21.png}}
      \caption{A regular 1D convolution.  kernel size = 3, stride = 1 , padding = 0. The vector $z$ is in the input feature map. The matrix $K$ represents the convolution operation.}
  \end{figure}
  A regular convolution decreases the dimensionality of the feature map from 6 to 4.\\
\end{vbframe}

\begin{frame}{Transposed Convolutions}

    Example 2: Transposed Convolution as matrix multiplication:
    \vspace*{-0.2cm}
  \begin{figure}
      \centering
      \scalebox{0.75}{\includegraphics{plots/05_conv_variations/transpose/tr_ex22.png}}
      \caption{\footnotesize{A transposed convolution can be used to upsample the feature vector of length 4 back to a feature vector of length 6.}}
  \end{figure}

  \vspace*{-0.4cm}

  \textbf{Note}:
  \begin{itemize}
  	\only<1>{\item Even though the transpose of the original matrix is shown in this example, the actual values of the weights are different from the original matrix (and optimized by backpropagation). }
  	\only<1>{\item The goal of the transposed convolution here is simply to get back the original dimensionality. It is \textit{not} necessarily to get back the original feature map itself.}
  	\only<2>{\item The elements in the downsampled vector only affect those elements in the upsampled vector that they were originally "derived" from. For example, $z_7$ was computed using $z_1$ , $z_2$ and $z_3$ and it is only used to compute $\tilde{z}_1$, $\tilde{z}_2$ and $\tilde{z}_3$.}
  	\only<2>{\item In general, transposing the original matrix does not result in a convolution. But a transposed convolution can always be implemented as a regular convolution by using various padding strategies (this would not be very efficient, however).}
  \end{itemize}

\end{frame}

\begin{frame}{Transposed Convolutions}
  
  Example 3: Let us now view transposed convolutions from a different perspective.
  
  \only<1>{
  \begin{figure}
      \centering
      \scalebox{0.9}{\includegraphics{plots/05_conv_variations/transpose/tr_conv_1.png}}
      \tiny{\\credit: Stanford University}
      \caption{Regular $3\times 3$ convolution, stride 2, padding 1.}
  \end{figure}
 }

  \only<2>{
  \begin{figure}
      \centering
      \scalebox{0.9}{\includegraphics{plots/05_conv_variations/transpose/tr_conv_2.png}}
      \tiny{\\credit: Stanford University}
      \caption{Regular $3\times 3$ convolution, stride 2, padding 1.}
  \end{figure}
 }

  \only<3>{
  \begin{figure}
      \centering
      \scalebox{0.8}{\includegraphics{plots/05_conv_variations/transpose/tr_conv_3.png}}
      \tiny{\\credit: Stanford University}
      \caption{\textit{Transposed} $3\times 3$ convolution, stride 2, padding 1. Note: stride now refers to the "stride" in the \textit{output}.}
  \end{figure}

   Here, the filter is \textit{scaled} by the input.\\

 }

  \only<4>{
  \begin{figure}
      \centering
      \scalebox{0.8}{\includegraphics{plots/05_conv_variations/transpose/tr_conv_4.png}}
      \tiny{\\credit: Stanford University}
      \caption{\textit{Transposed} $3\times 3$ convolution, stride 2, padding 1. Note: stride now refers to the "stride" in the \textit{output}.}
  \end{figure}
  Here, the filter is \textit{scaled} by the input.

 }

\end{frame}


\begin{vbframe}{Transposed Convolutions -- drawback}
    \begin{figure}
        \centering
        \includegraphics[width=8cm]{plots/05_conv_variations/transpose/transpose_artifact.png}
        \caption{Artifacts produced by transposed convolutions \cite{24}.}
    \end{figure}
    \begin{itemize}
        \item Transposed convolutions lead to checkerboard-style artifacts in resulting images.
    \end{itemize}
\framebreak
    \begin{itemize}
        \small{\item Explanation: transposed convolution yields an overlap in some feature map values.
        \item This leads to higher magnitude for some feature map elements than for others, resulting in the checkerboard pattern.
        \item One solution is to ensure that the kernel size is divisible by the stride.
        }
    \end{itemize}
        \begin{figure}
            \centering
              \scalebox{0.65}{\includegraphics{plots/05_conv_variations/transpose/deconv_blog.png}}
            \caption{\footnotesize{1D example. In both images, top row = input and bottom row = output. \textit{Top}: Here, kernel weights overlap unevenly which results in a checkerboard pattern. \textit{Bottom}: There is no checkerboard pattern as the kernel size is divisible by the stride.}}
        \end{figure}
        % \begin{figure}
        %     \centering
        %       \scalebox{0.60}{\includegraphics{plots/05_conv_variations/transpose/stride_dec.png}}
        %     \caption{\small{1D example with stride = 2 and kernel size = 4.}}
        % \end{figure}
% \framebreak
%     \begin{itemize}
%         \item Solutions: 
%         \begin{itemize}
%             \item Increase dimensionality via upsampling (bilinear, nearest neighbor) and then convolve this output with regular convolution.
%             \item Make sure that the kernel size $k$ is divisible by the stride $s$.
%         \end{itemize}
%     \end{itemize}
%     \begin{figure}
%         \centering
%         \includegraphics[width=5cm]{plots/05_conv_variations/transpose/upsample.png}
%         \caption{Nearest neighbor upsampling and subsequent same convolution to avoid checkerboard patterns.}
%     \end{figure}
\end{vbframe}

\section{Advanced components of CNNs}

%\begin{vbframe}{Important Types of Convolutions}
%
%
%\vspace*{0.2cm}
%
%In this chapter, we discuss further advanced components of CNNs: 
%
%    \begin{enumerate}
%    \item Inception Modules 
%    \item Skip Connections 
%    \item Global Average Pooling
%    \end{enumerate}
%\end{vbframe}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%\section{Inception Modules}

\begin{vbframe}{Inception modules}
    \begin{itemize}
        \item Problem setting: how do we choose the kernel size in each layer? 
        \item This is often an arbitrary decision.
        \item Solution: offer the model kernels of different sizes in each layer through which it can propagate information and let it decide, which one to use to which extent.
        \item Side-effect: massive parameter reduction allowing for deeper architectures.
        \item First proposed in \cite{26}.
    \end{itemize}
\framebreak
  \begin{figure}
    \centering
      \scalebox{0.75}{\includegraphics{plots/05_conv_variations/inception/incept_naive.png}}
    \caption{Naive inception module. The model can \enquote{choose} from kernels of different sizes.}
  \end{figure}
        \small{Idea: do several convolutions in parallel and concatenate the resulting feature maps in the depth dimension. This requires equal dimensions of the feature maps created by the parallel convolutions.Thus, same padding is used throughout the parallel convolutions.}
\framebreak 
    \begin{figure}
      \centering
      \scalebox{0.75}{\includegraphics{plots/05_conv_variations/inception/incep_ex.png}}
      \caption{\footnotesize{Naive Inception module - Example}}
    \end{figure}
    \begin{itemize}
        \item \small{To allow for the bypass of information throughout one inception module, an 1x1 convolutional layer is also included.
        \item Max-pooling is used as it is ought to increase the robustness of the feature maps. The kernels are padded accordingly to yield feature maps of equal dimensions.}
    \end{itemize}
\framebreak
    \begin{figure}
      \centering
      \scalebox{0.80}{\includegraphics{plots/05_conv_variations/inception/incep_ex.png}}
      \caption{\footnotesize{Naive Inception module - Example}}
    \end{figure}
    \begin{itemize}
        \item \small{Resulting feature map blocks are restricted to have the same dimensionality but can be of varying depth.
        \item The different feature maps are finally concatenated in the depth-dimension and fed to the next layer.}
    \end{itemize}
\end{vbframe}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% good blog post: https://hacktilldawn.com/2016/09/25/inception-modules-explained-and-implemented/
\begin{vbframe}{Inception modules}
  \begin{figure}
    \centering
    \includegraphics[width=8cm]{plots/05_conv_variations/inception/incept_naive.png}
    \caption{Naive inception module.}
  \end{figure}
    \begin{itemize}
        \item Problem: 3x3 and 5x5 convolutions are expensive operations, especially when executed on very deep input blocks such as many feature maps from the previous layer.
    \end{itemize}
\end{vbframe}

\begin{vbframe}{Inception modules}
  \begin{figure}
    \centering
    \includegraphics[width=8cm]{plots/05_conv_variations/inception/incept_dim_reduction.png}
    \caption{Dimensionality reduced inception module.}
  \end{figure}
    \begin{itemize}
        \item Solution: apply 1x1 convolutions beforehand to reduce the depth of the previous feature map.
    \end{itemize}
    \framebreak
    \begin{figure}
        \centering
           \includegraphics[width=11.5cm]{plots/architectures/googlenet.png}
        \caption{Inception modules are the integral part of the famous GoogLeNet (2014), also known as Inception  net, one of the first very deep net architectures.}
        \end{figure}
\end{vbframe}

\begin{vbframe}{Inception modules}
    \begin{itemize}
        \item Let us understand this with a little numerical example.
        \item Output dimensions of the previous layer: [28, 28, 192].
        \item Output dimensions of the 5x5 convolution from the inception module: [28, 28, 32].
        \item The 5x5 convolution has stride 1 and same padding.
        \item To improve speed, we first convolve the [28, 28, 192] input with 16 1x1 kernels which results in a [28, 28, 16] block. We then apply the 32 5x5 kernel convolution on this \enquote{thinner} block.
        \item Required operations:
        \begin{itemize}
            \item Naive: $5^2 \cdot 28^2 \cdot 192 \cdot 32 = 120.422.400$
            \item Improved version with 1x1 convolution and depth 16: $1^2 \cdot 28^2 \cdot 192 \cdot 16 + 5^2 \cdot 28^2 \cdot 16 \cdot 32 = 12.443.648$
        \end{itemize}
    \end{itemize}
\end{vbframe}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% \begin{vbframe}{Separable convolutions}
%     \begin{itemize}
%         \item Problem setting: make convolution computationally more efficient.
%         \item Remember the sobel kernel from the previous lecture:
%             \begin{equation*}
%                     K_x = 
%                     \begin{bmatrix}
%                         +1 & 0 & -1 \\
%                         +2 & 0 & -2 \\
%                         +1 & 0 & -1 
%                     \end{bmatrix}
%             \end{equation*}
%         \item This 3x3 dimensional kernel can be replaced by the outer product of two 3x1 and 1x3 dimensional kernels:
%             \begin{equation*}
%                     \begin{bmatrix}
%                         +1 \\ 
%                         +2 \\
%                         +1   
%                     \end{bmatrix}* 
%                     \begin{bmatrix}
%                         +1 & 0 & -1   
%                     \end{bmatrix}
%             \end{equation*}
%         \item Convolving with both filters subsequently has a similar effect, reduces the amount of parameters to be stored and thus improves speed.
%     \end{itemize}
% \framebreak
% \begin{figure}
%       \centering
%       \scalebox{0.9}{\includegraphics{plots/05_conv_variations/inception/insep_1.png}}
%       \caption{\textit{Left}: Regular Inception module . \textit{Right}: Inception module where each 5x5 convolution is replaced by two 3x3 convolutions.}
%     Separable convolutions (also: factorized) find application in the inception net V4 \cite{28}. The authors find that it increases computational speed but suggest to use this trick in medium to late stage layers only.
%     \end{figure}
% \framebreak
% \begin{figure}
%       \centering
%       \scalebox{0.9}{\includegraphics{plots/05_conv_variations/inception/insep_2.png}}
%       \caption{\textit{Left}: Inception module from the previous slide. \textit{Right}: Inception module after the factorization of the $nxn$ convolutions (n = 3, here).}
%     \end{figure}
% % \framebreak
% %     \begin{figure}
% %         \centering
% %         \includegraphics[width=4cm]{plots/05_conv_variations/separable/separable.png}
% %         \footnotesize{\\credit: Szegedy et al. 2014}
% %         \caption{Seperable convolutions (also: factorized) find application in the inception net V4 \cite{28}. The authors find it to increase computational speed but suggest to use this trick in medium to late stage layers only.}
% %     \end{figure}
% \end{vbframe}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%\section{Skip connections}

\begin{vbframe}{Skip connections}
    \begin{itemize}
        \item Problem setting: theoretically, we could build infinitely deep architectures as the net should learn to pick the beneficial layers and skip those that do not improve the performance automatically.
        \item But: this skipping would imply learning an identity mapping $\xb = \mathcal{F}(\xb)$. It is very hard for a neural net to learn such a 1:1 mapping through the many non-linear activations in the architecture.
        \item Solution: offer the model explicitly the opportunity to skip certain layers if they are not useful.
        \item Introduced in \cite{29} and motivated by the observation that stacking evermore layers increases the test- as well as the train-error ($\neq$ overfitting).
    \end{itemize}
\framebreak
  \begin{figure}
    \centering
    \includegraphics[width=7cm]{plots/05_conv_variations/skip/residual_module.png}
    \caption{Skip connection/ residual learning module. The information flows through two layers and the identity function. Both streams of information are then element-wise summed and jointly activated.}
  \end{figure}
\framebreak
    \begin{itemize}
        \item Let $\mathcal{H}(\xb)$ be the optimal underlying mapping that should be learned by (parts of) the net.
        \item $x$ is the input in layer $l$ (can be raw data input or the output of a previous layer).
        \item $\mathcal{H}(\xb)$ is the output from layer $l$.
        \item Instead of fitting $\mathcal{H}(x)$, the net is ought to learn the residual mapping $\mathcal{F}(\xb):=\mathcal{H}(\xb)-\xb$ whilst $x$ is added via the identity mapping.
        \item Thus, $\mathcal{H}(\xb) = \mathcal{F}(\xb) + \xb$, as formulated on the previous slide.
        \item The model should only learn the \textbf{residual mapping} $\mathcal{F}(\xb)$ 
        \item Thus, the procedure is also referred to as \textbf{Residual Learning}.
    \end{itemize}
\framebreak
    \begin{itemize}
        \item The element-wise addition of the learned residuals $\mathcal{F}(\xb)$ and the identity-mapped data $\xb$ requires both to have the same dimensions.
        \item To allow for downsampling within $\mathcal{F}(\xb)$ (via pooling or valid-padded convolutions), the authors introduce a linear projection layer $W_s$ .
        \item $W_s$ ensures that $\xb$ is brought to the same dimensionality as $\mathcal{F}(\xb)$ such that:
        $$
            y = \mathcal{F}(\xb) + W_s\xb,
        $$
        \item $y$ is the output of the skip module and $W_s$ represents the weight matrix of the linear projection (\# rows of $W_s$ = dimensionality of $\mathcal{F}(\xb)$).
        \item This idea applies to fully connected layers as well as to convolutional layers.
    \end{itemize}
    \framebreak
  \begin{figure}
  \centering
    \includegraphics[width=11.5cm]{plots/architectures/resnet.png}
    \caption{ Skip connetions are the integral part of ResNet architectures [Christian Szegedy et al., 2014].}
  \end{figure}
\end{vbframe}


%\section{Global average pooling}

\begin{vbframe}{Global average pooling}
    \begin{itemize}
        \item Problem setting: tackle overfitting in the final fully connected layer.
        \begin{itemize}
        \item Classic pooling removes spatial information and is mainly used for dimension and parameter reduction.
        \item The elements of the final feature maps are connected to the output layer via a dense layer. This could require a huge number of weights increasing the danger of overfitting.
        \item Example: 256 feature maps of dim 100x100 connected to 10 output neurons lead to $25.6\times 10^6$ weights for the final dense layer.
        \end{itemize}
        \framebreak 

        \item Solution: 
        \begin{itemize}
            \item Average each final feature map to the element of one global average pooling (GAP) vector.
            \item Do not use pooling throughout the net.
            \item Example: 256 feature maps are now reduced to GAP-vector of length 256 yielding a final dense layer with 2560 weights.
        \end{itemize}
    \end{itemize}

    \begin{figure}
        \centering
        \includegraphics[width=11cm]{plots/05_conv_variations/gap/GAP.png}
        \small{\caption{Illustration of GAP \cite{25}. Each feature map representing one feature category averaged into one final vector. No pooling operations are applied throughout the net. The dimensionality of the input reduces solely due to the convolution operations. }}
    \end{figure}

\framebreak

    \begin{itemize}
        \item GAP preserves whole information from the single feature maps whilst decreasing the dimension.
        \item Mitigates the possibly \textbf{destructive} effect of pooling.
        \item Each element of the GAP output represents the activation of a certain feature on the input data.
        \item Acts as an additional regularizer on the final fully connected layer.
        \item Allows for interpretation of the model via Class Activation Maps (more on this later).
    \end{itemize}

\end{vbframe}

% \begin{vbframe}{Types: squeeze-and-excite}
%     \begin{itemize}
%         \item Problem setting: some feature maps from one convolutional block can be more important than others. Still, we force the net to weight them equally. 
%         \item Solution: offer the model a way to weight the channels of each feature map block individually.
%         \item Intuition: some features (car wheel vs. straight line) might be more important than others for the final prediction. Allow the model, to weight them according to their importance.
%         \item Most basic variant: add scalar parameter to each feature map and let the model adapt its relevance throughout training.
%         \item Easily applicable to any convolutional layer.
%         \item Proposed by \cite{27}.
%     \end{itemize}
% \framebreak
%     \begin{figure}
%     \centering
%     \includegraphics[width=11cm]{plots/05_conv_variations/se/se.png}
%     \caption{Illustration of SE as in \cite{27}: in the \textbf{squeeze}-step the feature map U with depth C is transformed to a vector of length C via GAP. Then, a simple 2-layer dense net is used to add non-linearity and output the \textbf{excited} vector of length C. The initial feature map is now multiplied with this vector and the output is fed into the next layer.}
%     \end{figure}
% \framebreak
%     \begin{itemize}
%         \item The authors include a little bit more complexity in the following steps:
%         \begin{enumerate}
%             \item \textbf{Squeeze} feature map $U$ of depth $C$ to vector of the same length via GAP.
%             \item Run a 2-layer dense net on this vector to yield another, \textbf{excited} vector of length $C$ to introduce non-linearity in the process.
%             \item Multiply the initial feature map block by this scalar vector.
%             \item Feed the scaled block $\tilde X$ to the subsequent convolutional layer.
%         \end{enumerate}
%     \end{itemize}
% \end{vbframe}

\begin{vbframe}{Class activation mapping}
    \begin{itemize}
        \item We want to understand the decision-making of a net, e.g. \textbf{why does it classify image X as a cat?}
        \item Simplest method based on GAP was introduced in \cite{32}.
        \item Idea: 
        \begin{itemize}
            \item the final GAP vector stores the activation of each feature map category that was learnt throughout the net.
            \item the dense layer that connects the output classes with the GAP vector stores information about how much each feature contributes to each class.
            \item exploit this information to show which parts of the input image would be activated for each class.
        \end{itemize}
    \end{itemize}
\framebreak
    \begin{figure}
    \centering
    \includegraphics[width=11cm]{plots/05_conv_variations/cam/cam_scheme.png}
    \caption{Illustration of the class activation mapping. The activated regions from the feature maps are summed up weighted by their connection strength with the final output classes and upsampled back to the dimension of the input image. No max-pooling is applied throughout the architecture, the downsampling is due to the CNN layers. }
    \end{figure}
\framebreak
    \begin{enumerate}
        \item Train a net with GAP pooling end-to-end.
        \item Run a forward-pass with the image $i$ you would like to understand.
        \item Take the final $l$ feature maps $f_1, ..., f_l$ for this input.
        \item Get the \textit{feature weights} $w_{j1}, ...,w_{jl}$ that connect the GAP layer with the final class output $j$ that you would like to interpret (e.g. terrier).
        \item Create the \textbf{class activation map} (CAM) for class $j$ on input image $i$:
        $$
            \text{CAM}_{j, i} = \sum_{k = 1}^{l}w_{jk} * f_k
        $$
        \item Normalize the values such that $\text{CAM}_{j, i} \in [0, 1]$.
        \item In case of valid convolutions, the resulting CAM will be smaller than the input image. Linear upsampling is then used to map it back to the input dimension.
        \item Overlay the input image with the CAM and interpret the activation.
    \end{enumerate}
% \framebreak
%     \begin{itemize}
%         \item There exists a variety of extensions such as:
%         \begin{itemize}
%             \item 
%         \end{itemize}
%     \end{itemize}
% \framebreak
%     \begin{itemize}
%         \item Zeiler et al (2013) with occluders: https://arxiv.org/abs/1311.2901
%         \item Grad-CAM blog: https://github.com/jacobgil/pytorch-grad-cam/blob/master/README.md
%         \item Gradient-based Localization (Grad-CAM) Paper: https://arxiv.org/abs/1610.02391
%     \end{itemize}
\end{vbframe}



% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \begin{vbframe}{Filter Visualization}
%     \begin{itemize}
%         \item keras post https://blog.keras.io/how-convolutional-neural-networks-see-the-world.html
%         \item explain mathematically
%     \end{itemize}
%     \begin{figure}
%         \centering
%         \includegraphics[width=10cm]{plots/other/visualization.png}
%         \caption{Visualizing and Understanding Convolutional Networks (Zeiler \& Fergus (2013))}
%     \end{figure}
% \end{vbframe}
% 
% 
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \begin{vbframe}{Transfer Learning example}
%     \begin{itemize}
%         \item use trained model, freeze and fine-tune the last layers
%         \item practical example
%     \end{itemize}
% \end{vbframe}























%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%          REFERENCES          %%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{vbframe}
\frametitle{References}
\footnotesize{
\begin{thebibliography}{99}

\bibitem[Dumoulin et al., 2016]{14} Dumoulin, Vincent and Visin, Francesco (2016)
\newblock A guide to convolution arithmetic for deep learning
\newblock \emph{\url{https://arxiv.org/abs/1603.07285v1}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\bibitem[van den Oord et al., 2016]{15} Van den Oord, Aaron, Sander Dielman, Karen Simonyan, Oriol Vinyals, Alex Graves, Nal Kalchbrenner, and Koray Kavukocuoglu (2016)
\newblock WaveNet: A Generative Model for Raw Audio
\newblock \emph{\url{https://arxiv.org/abs/1609.03499}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\bibitem[Gennart et al., 1996]{17} Benoit A., Gennart, Bernard Krummenacher, Roger D. Hersch, Bernard Saugy, J.C. Hadorn and D. Mueller (1996)
\newblock The Giga View Multiprocessor Multidisk Image Server
\newblock \emph{\url{https://www.researchgate.net/publication/220060811_The_Giga_View_Multiprocessor_Multidisk_Image_Server}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\bibitem[Tran et al., 2015]{18} Tran, Du, Lubomir Bourdev, Rob Fergus,  Lorenzo Torresani and Paluri Manohar (2015)
\newblock Learning Spatiotemporal Features with 3D Convolutional Networks
\newblock \emph{\url{https://arxiv.org/pdf/1412.0767.pdf}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\bibitem[Milletari et al., 2016]{19} Milletari, Fausto, Nassir Navab and  Seyed-Ahmad Ahmadi (2016)
\newblock V-Net: Fully Convolutional Neural Networks for
Volumetric Medical Image Segmentation
\newblock \emph{\url{https://arxiv.org/pdf/1606.04797.pdf}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\bibitem[Zhang et al., 2015]{20} Zhang, Xiang, Junbo Zhao and Yann LeCun (2015)
\newblock Character-level Convolutional Networks for Text Classification
\newblock \emph{\url{http://arxiv.org/abs/1509.01626}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\bibitem[Wang et al., 2017]{21} Wang, Zhiguang, Weizhong Yan and Tim Oates (2017)
\newblock Time Series Classification from Scratch with Deep Neural Networks: A Strong Baseline
\newblock \emph{\url{http://arxiv.org/abs/1509.01626}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\bibitem[Yu et. al, 2015]{22} Fisher Yu and Vladlen Koltun (2015)
\newblock Multi-Scale Context Aggregation by Dilated Convolutions
\newblock \emph{\url{https://arxiv.org/abs/1511.07122}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\bibitem[Bai et. al, 2018]{23} Bai, Shaojie,  Zico J. Kolter and Vladlen Koltun (2018)
\newblock An Empirical Evaluation of Generic Convolutional and Recurrent Networks for Sequence Modeling
\newblock \emph{\url{http://arxiv.org/abs/1509.01626}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\bibitem[Odena et. al , 2017]{24} Augustus Odena, Vincent Dumoulin and Chris Olah (2016)
\newblock Deconvolution and Checkerboard Artifacts
\newblock \emph{\url{https://distill.pub/2016/deconv-checkerboard/}{https://distill.pub/2016/deconv-checkerboard/}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\bibitem[Wang et. al , 2017]{31} Zhiguang Wang, Yan, Weizhong and Tim Oates (2017)
\newblock Time series classification from scratch with deep neural networks: A
strong baseline
\newblock \emph{\url{https://arxiv.org/1611.06455}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\bibitem[Lin et al., 2017]{38} Lin, Haoning and Shi, Zhenwei and Zou, Zhengxia (2017)
\newblock Maritime Semantic Labeling of Optical Remote Sensing Images with Multi-Scale Fully Convolutional Network
\bibitem[Ronneberger et al., 2015]{12} Olaf Ronneberger, Philipp Fischer, Thomas Brox (2015)
\newblock U-Net: Convolutional Networks for Biomedical Image Segmentation
\newblock \emph{\url{http://arxiv.org/abs/1505.04597}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\bibitem[Zhou et. al , 2016]{25} B. Zhou, Khosla, A., Labedriza, A., Oliva, A. and A. Torralba (2016)
\newblock Deconvolution and Checkerboard Artifacts
\newblock \emph{\url{http://cnnlocalization.csail.mit.edu/Zhou_Learning_Deep_Features_CVPR_2016_paper.pdf}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\bibitem[Szegedy et. al , 2014]{26} Christian Szegedy, Wei Liu, Yangqing Jia, Pierre Sermanet, Scott Reed, Dragomir Anguelov, Dumitru Erhan, Vincent Vanhoucke and Andrew Rabinovich (2014)
\newblock Going deeper with convolutions
\newblock \emph{\url{https://arxiv.org/abs/1409.4842}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \bibitem[Jie Hu et. al , 2014]{27} Jie Hu, Shen, Li and Gang Sun (2017)
% \newblock Squeeze-and-Excitation Networks
% \newblock \emph{\url{https://arxiv.org/abs/1709.01507}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \bibitem[Szegedy Christian et. al , 2015]{28} Christian Szegedy, Vanhoucke, Vincent, Sergey, Ioffe, Shlens, Jonathan and Wojna Zbigniew (2015)
% \newblock Rethinking the Inception Architecture for Computer Vision
% \newblock \emph{\url{https://arxiv.org/abs/1512.00567}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\bibitem[He et. al , 2015]{29} Kaiming He, Zhang, Xiangyu, Ren, Shaoqing, and Jian Sun (2015)
\newblock Deep Residual Learning for Image Recognition
\newblock \emph{\url{https://arxiv.org/abs/1512.03385}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\bibitem[Zhou et. al, 2016]{32} Bolei Zhou, Aditya Khosla, Agata Lapedriza, Aude Oliva and Antonio Torralba (2016)
\newblock Learning Deep Features for Discriminative Localization
\newblock \emph{\url{http://cnnlocalization.csail.mit.edu/Zhou_Learning_Deep_Features_CVPR_2016_paper.pdf}}
\end{thebibliography}
}
\end{vbframe}
\endlecture
